#!/bin/bash

# Identify kernel module used for wireless connections in $kernelmodule
getKernelModule() {
  lspciwireless=`lspci -k | grep -i -A 3 wireless`
  kernelmoduleline=`echo $lspciwireless | grep -o -P '.{0,0}modules.{0,100}'`
  kernelmodule=`echo $kernelmoduleline | grep -o -P '.{0,0} .{0,100}'`
}

# Identify exact wireless adapter model in $wirelesscard
getWifiCard() {
  lspciwireless=`lspci -k | grep -i wireless`
  wirelesscard=`echo $lspciwireless | grep -o -P '.{0,0}Network controller.{0,100}'`
}

# Identify availalbe wireless interface in $wifiinterface
getWifiInterface() {
  wifiinterface=`ip addr | grep -m 1 -o -e "w[^:]*"`
}

# Identify available wired interface in $ethinterface
getEthInterface() {
  ethinterface=`ip addr | grep -m 1 -o -e "e[^:]*"`
}

# Activate wireless interface [requires getWifiInterface()]
wifiInterfaceUp() {
  ip link set $wifiinterface up
}

# Activate wired interface [requires getEthInterface()]
ethInterfaceUp() {
  ip link set $ethinterface up
}

# Scan area for wireless networks and echoes list [requires getWifiInterface() and wifiInterfaceUp()]
getNetworkSSID() {
  iw dev $wifiinterface scan | grep SSID
}

# Connect to a wireless network (affected by issue #1) [requires getWifiInterface(), wifiInterfaceUp(), $networkssid, and $networkkey]
wifiConnect() {
  if [ -z $networkkey ]
  then
    iw dev $wifiinterface connect $networkssid
  else
    while [ "$securitytype" != "WPA2" ] && [ "$securitytype" != "wpa2" ] && [ "$securitytype" != "WPA" ] && [ "$securitytype" != "wpa" ] && [ "$securitytype" != "WEP" ] && [ "$securitytype" != "wep" ];
    do
      echo -e "${red}${bold}Please specify whether this network uses WEP or WPA/WPA2: "
      read securitytype;
    done
    if [ "$securitytype" == "WPA2" ] || [ "$securitytype" == "WPA" ] || [ "$securitytype" == "wpa2" ] || [ "$securitytype" == "wpa" ]
    then
      set +H
      wpa_supplicant -B -i $wifiinterface -c <(wpa_passphrase "$networkssid" "$networkkey")
      set -H
    else
      iw dev $wifiinterface connect $networkssid key 0:$networkkey
    fi
  fi
  dhcpcd $wifiinterface
}

# Disconnect from wireless networks and deactivate wireless interface (affected by issue #1) [requires getWifiInterface()]
wifiDisconnect() {
  killall dhcpcd
  iw dev $wifiinterface disconnect
  ip link set $wifiinterface down
}

# Disconnect from wired networks and deactivate wired interface [requires getEthInterface()]
ethDisconnect() {
  killall dhcpcd
  iw dev $ethinterface disconnect
  ip link set $ethinterface down
}

# Echo detailed information about wireless interface
infoWifiInterface() {
  ifconfig $wifiinterface
}

# Echo current status of wireless interface
statusWifiInterface() {
  iw dev $wifiinterface link
}

# Echo detailed information about wired interface
infoEthInterface() {
  ifconfig $ethinterface
}

# Echo current status of wired interface
statusEthInterface() {
  iw dev $ethinterface link
}

# Enable wireless connection at boot [requires systemd]
wifiEnable() {
  echo "[Unit]
Description=Network Reconnect

[Service]
ExecStart=/usr/bin/network-reconnect -m $wifiinterface $networkssid $networkkey

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/network-reconnect.service
  systemctl enable network-reconnect.service
}

# Enable wired connection at boot [requires systemd]
ethEnable() {
  echo "[Unit]
Description=Network Reconnect

[Service]
ExecStart=/usr/bin/network-reconnect -m $ethinterface

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/network-reconnect.service
  systemctl enable network-reconnect.service
}

# Backend used to interact with other parts of network-reconnect
case "$1" in
  # --backend flag must be issued
  --backend)
    # Direct integration for network-checker
    if [ $2 == "checker" ]
    then
      # Import passed variables
      wifiinterface=$3
      networkssid=$4
      networkkey=$5
      successcount=$6
      failcount=$7
      timetosleep=$8
      # Identify kernel module used for wireless connections in $kernelmodule
      getKernelModule
      # Echo error to log
      echo "Background daemon stopped due to excessive failure. Trying to restart..." >> /var/log/network-reconnect.log
      # Attempt to reinitiate connection
      wifiDisconnect
      modprobe -r $kernelmodule
      rfkill block all
      rfkill unblock all
      modprobe $kernelmodule
      wifiDisconnect
      wifiInterfaceUp
      wifiDisconnect
      if [ -z $networkkey ]
      then
        iw dev $wifiinterface connect $networkssid
      else
        iw dev $wifiinterface connect $networkssid key 0:$networkkey
      fi
      killall dhcpcd
      dhcpcd $wifiinterface
      # Restart network-checker
      network-checker $wifiinterface $networkssid $networkkey $successcount $failcount $timetosleep &
      # Echo information to log
      echo -e "${green}${bold}Background daemon started.${normal}${nocolor}"
    fi
  ;;
esac

